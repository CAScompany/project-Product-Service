name: Product-Service
on: workflow_dispatch
#on: [push, workflow_dispatch]
env:
  CODE_DIR: products-service
  ECR_REPOSITORY: proyecto-ort-repo
  AWS_REGION: us-east-1
  EKS_CLUSTER: project-ort-eks
#  EKS_CLUSTER:
jobs:
  # Testing:
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ${{ env.CODE_DIR }}
  #   steps:
  #     - name: Code checkout 
  #       uses: actions/checkout@v4

  #     - name: Maven test 
  #       run: mvn test 

  #     - name: Checkstyle
  #       run: mvn checkstyle:checkstyle 

  #     - name: Set up JDK 11
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: 'temurin' 
  #         java-version: '11'

  #     - name: Setup SonarQube
  #       uses: warchant/setup-sonar-scanner@v7

  #   # Run sonar-scanner
  #     - name: SonarQube Scan
  #       run: sonar-scanner -X
  #             -Dsonar.host.url=${{ secrets.SONAR_URL }}
  #             -Dsonar.token=${{ secrets.SONAR_TOKEN }}
  #             -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
  #             -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
  #             -Dsonar.sources=src/
  #             -Dsonar.junit.reportsPath=target/surefire-reports/
  #             -Dsonar.junit.reportsPath=target/checckstyle-result.xml
  #             -Dsonar.jacoco.reportsPathtarjet/jacoco.exec
  #             -Dsonar.java.checkstyle.reportPath=target/checkstyle-result.xml
  #             -Dsonar.java.binaries=target/test-classes/uy/edu/ort/devops/productsserviceexample/


  #     - name: SonarQube Quality Gate check
  #       id: sonarqube-quality-gate-check
  #       uses: sonarsource/sonarqube-quality-gate-action@master
  #       with:
  #         scanMetadataReportFile: /home/runner/work/project-Product-Service/project-Product-Service/products-service/.scannerwork/report-task.txt
  #       # Force to fail step after specific time. $GITHUB_WORKSPACE
  #       timeout-minutes: 5
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_URL }} #OPTIONAL
  FUNTIONAL_TESTING:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.CODE_DIR }}
    steps:
      - name: Checkout del c√≥digo
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' 
          java-version: '11'

      - name: Compilar y ejecutar el JAR
        run: |
          mvn install -B
          java -jar $GITHUB_WORKSPACE/products-service/target/products-service-example-0.0.1-SNAPSHOT.jar &
          sleep 5

      - name: Instalar Node.js y npm
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Instalar Newman
        run: |
              npm install -g newman@latest
              nmp install -g newman-reporter-htmlextra
              npm fund

      - name: Ejecutar pruebas funcionales con Newman
        run: |
              newman run ./postman_test.json -r cli,htmlextra --report-htmlextra-export testArtifacts/htmlreport.html
#              cd newman && ls | grep *.html | awk '{print $1}' | xargs -I {} mv {} reporte.html

      - name: Almacenar reporte como artefacto
        uses: actions/upload-artifact@v3
        with:
          name: reporte-postman
          path: testArtifacts

#   Release:
# #    needs:  Testing
#     runs-on: ubuntu-latest
#     defaults:
#       run:
#         working-directory: ${{ env.CODE_DIR }}
#     steps:
#       - name: Code checkout 
#         uses: actions/checkout@v4
#       - name: Build JAR
#         run: mvn install -B

#       - name: Create GitHub Release
#         id: create_release
#         uses: actions/create-release@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.TOKEN_RELEASE }}
#         with:
#           tag_name: v${{github.run_number}}
#           release_name: product-service
#           body: product-service v${{github.run_number}}
#           draft: false
#           prerelease: false 
        
#       - name: Upload JAR to Release          
#         uses: actions/upload-release-asset@v1
#         env:
#           GITHUB_TOKEN: ${{ secrets.TOKEN_RELEASE }}
  
#         with:
#           upload_url: ${{ steps.create_release.outputs.upload_url }}
#           asset_path: ./products-service/target/products-service-example-0.0.1-SNAPSHOT.jar
#           asset_name: products-service-example-0.0.1-SNAPSHOT.jar
#           asset_content_type: application/java-archive

  # BUILD_AND_PUBLISH:
  #   needs:  Release
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       working-directory: ${{ env.CODE_DIR }}
  #   steps:
  #     - name: Code checkout 
  #       uses: actions/checkout@v4

  #     - name: upload image to ECR
  #       uses: appleboy/docker-ecr-action@master        
  #       with:
  #         access_key: ${{ secrets.AWS_ACCESS_KEY_ID_PERSONAL_ECR}}
  #         secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PERSONAL_ECR}}
  #         registry: ${{ secrets.registry }}
  #         repo: ${{env.ECR_REPOSITORY}}
  #         region: ${{env.AWS_REGION}}
  #         tags: latest,${{github.run_number}}
  #         daemon_off: false
  #         dockerfile: ./Dockerfile
  #         context: ./